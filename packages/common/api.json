{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.43.0",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@web5/common!",
  "docComment": "",
  "name": "@web5/common",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@web5/common!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@web5/common!Convert:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Convert "
            }
          ],
          "fileUrlPath": "src/convert.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Convert",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@web5/common!Convert:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Convert` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", format: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "format",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert.arrayBuffer:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static arrayBuffer(data: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Convert",
                  "canonicalReference": "@web5/common!Convert:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "arrayBuffer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert.asyncIterable:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static asyncIterable(data: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Convert",
                  "canonicalReference": "@web5/common!Convert:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "asyncIterable"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert.base58Btc:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static base58Btc(data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Convert",
                  "canonicalReference": "@web5/common!Convert:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "base58Btc"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert.base64Url:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static base64Url(data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Convert",
                  "canonicalReference": "@web5/common!Convert:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "base64Url"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert.bufferSource:member(1)",
              "docComment": "/**\n * Reference: The BufferSource type is a TypeScript type that represents an ArrayBuffer or one of the ArrayBufferView types, such a TypedArray (e.g., Uint8Array) or a DataView.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static bufferSource(data: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferSource",
                  "canonicalReference": "!BufferSource:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Convert",
                  "canonicalReference": "@web5/common!Convert:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "bufferSource"
            },
            {
              "kind": "Property",
              "canonicalReference": "@web5/common!Convert#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@web5/common!Convert#format:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "format: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "format",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert.hex:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static hex(data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Convert",
                  "canonicalReference": "@web5/common!Convert:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "hex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert.multibase:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static multibase(data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Convert",
                  "canonicalReference": "@web5/common!Convert:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "multibase"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert.object:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static object(data: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, any>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Convert",
                  "canonicalReference": "@web5/common!Convert:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "object"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert.string:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static string(data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Convert",
                  "canonicalReference": "@web5/common!Convert:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "string"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toArrayBuffer:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArrayBuffer(): "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toArrayBuffer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toArrayBufferAsync:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArrayBufferAsync(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toArrayBufferAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toBase58Btc:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toBase58Btc(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toBase58Btc"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toBase64Url:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toBase64Url(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toBase64Url"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toBlobAsync:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toBlobAsync(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Blob",
                  "canonicalReference": "!Blob:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toBlobAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toHex:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toHex(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toHex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toMultibase:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toMultibase(): "
                },
                {
                  "kind": "Reference",
                  "text": "Multibase",
                  "canonicalReference": "multiformats!Multibase:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toMultibase"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toObject:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toObject(): "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toObject"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toObjectAsync:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toObjectAsync(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toObjectAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toString:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toStringAsync:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toStringAsync(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toStringAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toUint8Array:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toUint8Array(): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toUint8Array"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert#toUint8ArrayAsync:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toUint8ArrayAsync(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toUint8ArrayAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Convert.uint8Array:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static uint8Array(data: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Convert",
                  "canonicalReference": "@web5/common!Convert:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "uint8Array"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@web5/common!isArrayBufferSlice:function(1)",
          "docComment": "/**\n * isArrayBufferSlice\n *\n * Checks if the ArrayBufferView represents a slice (subarray or a subview) of an ArrayBuffer.\n *\n * An ArrayBufferView (TypedArray or DataView) can represent a portion of an ArrayBuffer - such a view is said to be a \"slice\" of the original buffer. This can occur when the `subarray` or `slice` method is called on a TypedArray or when a DataView is created with a byteOffset and/or byteLength that doesn't cover the full ArrayBuffer.\n *\n * @param arrayBufferView - The ArrayBufferView to be checked\n *\n * @returns true if the ArrayBufferView represents a slice of an ArrayBuffer; false otherwise.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isArrayBufferSlice(arrayBufferView: "
            },
            {
              "kind": "Reference",
              "text": "ArrayBufferView",
              "canonicalReference": "!ArrayBufferView:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/type-utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arrayBufferView",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isArrayBufferSlice"
        },
        {
          "kind": "Function",
          "canonicalReference": "@web5/common!isAsyncIterable:function(1)",
          "docComment": "/**\n * Checks if the given object is an AsyncIterable.\n *\n * An AsyncIterable is an object that implements the AsyncIterable protocol, which means it has a [Symbol.asyncIterator] method. This function checks if the provided object conforms to this protocol by verifying the presence and type of the [Symbol.asyncIterator] method.\n *\n * @param obj - The object to be checked for AsyncIterable conformity.\n *\n * @returns True if the object is an AsyncIterable, false otherwise.\n *\n * @example\n * ```ts\n * // Returns true for a valid AsyncIterable\n * const asyncIterable = {\n *   async *[Symbol.asyncIterator]() {\n *     yield 1;\n *     yield 2;\n *   }\n * };\n * console.log(isAsyncIterable(asyncIterable)); // true\n * ```\n *\n * @example\n * ```ts\n * // Returns false for a regular object\n * console.log(isAsyncIterable({ a: 1, b: 2 })); // false\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isAsyncIterable(obj: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "obj",
              "canonicalReference": "@web5/common!~obj"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "AsyncIterable",
              "canonicalReference": "!AsyncIterable:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/type-utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isAsyncIterable"
        },
        {
          "kind": "Function",
          "canonicalReference": "@web5/common!isDefined:function(1)",
          "docComment": "/**\n * isDefined\n *\n * Utility function to check if a variable is neither null nor undefined. This function helps in making TypeScript infer the type of the variable as being defined, excluding `null` and `undefined`.\n *\n * The function uses strict equality (`!==`) for the comparison, ensuring that the variable is not just falsy (like an empty string or zero), but is truly either `null` or `undefined`.\n *\n * @param arg - The variable to be checked\n *\n * @returns true if the variable is neither `null` nor `undefined`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDefined<T>(arg: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "arg",
              "canonicalReference": "@web5/common!~arg"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<T, null | undefined>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/type-utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arg",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isDefined"
        },
        {
          "kind": "Function",
          "canonicalReference": "@web5/common!isEmptyObject:function(1)",
          "docComment": "/**\n * Checks whether the given object has any properties.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isEmptyObject(obj: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/object.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isEmptyObject"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@web5/common!KeyValueStore:interface",
          "docComment": "/**\n * Interface for a generic key-value store.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface KeyValueStore<K, V> "
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "KeyValueStore",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@web5/common!KeyValueStore#clear:member(1)",
              "docComment": "/**\n * Clears the store, removing all key-value pairs.\n *\n * @returns A promise that resolves when the store has been cleared.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@web5/common!KeyValueStore#close:member(1)",
              "docComment": "/**\n * Closes the store, freeing up any resources used. After calling this method, no other operations can be performed on the store.\n *\n * @returns A promise that resolves when the store has been closed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@web5/common!KeyValueStore#delete:member(1)",
              "docComment": "/**\n * Deletes a key-value pair from the store.\n *\n * @param key - The key of the value to delete.\n *\n * @returns A promise that resolves to true if the element existed and has been removed, or false if the element does not exist.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(key: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean | void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "delete"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@web5/common!KeyValueStore#get:member(1)",
              "docComment": "/**\n * Fetches a value from the store given its key.\n *\n * @param key - The key of the value to retrieve.\n *\n * @returns A promise that resolves with the value associated with the key, or `undefined` if no value exists for that key.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(key: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<V | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "get"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@web5/common!KeyValueStore#set:member(1)",
              "docComment": "/**\n * Sets the value for a key in the store.\n *\n * @param key - The key under which to store the value.\n *\n * @param value - The value to be stored.\n *\n * @returns A promise that resolves when the value has been set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(key: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "V"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "set"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@web5/common!LevelStore:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class LevelStore implements "
            },
            {
              "kind": "Reference",
              "text": "KeyValueStore",
              "canonicalReference": "@web5/common!KeyValueStore:interface"
            },
            {
              "kind": "Content",
              "text": "<string, any>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/stores.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "LevelStore",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@web5/common!LevelStore:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `LevelStore` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(location?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "location",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!LevelStore#clear:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!LevelStore#close:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!LevelStore#delete:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!LevelStore#get:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!LevelStore#set:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "set"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@web5/common!MemoryStore:class",
          "docComment": "/**\n * The `MemoryStore` class is an implementation of `KeyValueStore` that holds data in memory.\n *\n * It provides a basic key-value store that works synchronously and keeps all data in memory. This can be used for testing, or for handling small amounts of data with simple key-value semantics.\n *\n * Example usage:\n * ```ts\n * const memoryStore = new MemoryStore<string, number>();\n * await memoryStore.set(\"key1\", 1);\n * const value = await memoryStore.get(\"key1\");\n * console.log(value); // 1\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MemoryStore<K, V> implements "
            },
            {
              "kind": "Reference",
              "text": "KeyValueStore",
              "canonicalReference": "@web5/common!KeyValueStore:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/stores.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "MemoryStore",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!MemoryStore#clear:member(1)",
              "docComment": "/**\n * Clears all entries in the key-value store.\n *\n * @returns A Promise that resolves when the operation is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!MemoryStore#close:member(1)",
              "docComment": "/**\n * This operation is no-op for `MemoryStore` and will log a warning if called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!MemoryStore#delete:member(1)",
              "docComment": "/**\n * Deletes an entry from the key-value store by its key.\n *\n * @param id - The key of the entry to delete.\n *\n * @returns A Promise that resolves to a boolean indicating whether the entry was successfully deleted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(id: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!MemoryStore#get:member(1)",
              "docComment": "/**\n * Retrieves the value of an entry by its key.\n *\n * @param id - The key of the entry to retrieve.\n *\n * @returns A Promise that resolves to the value of the entry, or `undefined` if the entry does not exist.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(id: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<V | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!MemoryStore#has:member(1)",
              "docComment": "/**\n * Checks for the presence of an entry by key.\n *\n * @param id - The key to check for the existence of.\n *\n * @returns A Promise that resolves to a boolean indicating whether an element with the specified key exists or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "has(id: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "has"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!MemoryStore#list:member(1)",
              "docComment": "/**\n * Retrieves all values in the key-value store.\n *\n * @returns A Promise that resolves to an array of all values in the store.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "list(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<V[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "list"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!MemoryStore#set:member(1)",
              "docComment": "/**\n * Sets the value of an entry in the key-value store.\n *\n * @param id - The key of the entry to set.\n *\n * @param key - The new value for the entry.\n *\n * @returns A Promise that resolves when the operation is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(id: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": ", key: "
                },
                {
                  "kind": "Content",
                  "text": "V"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "set"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@web5/common!Multicodec:class",
          "docComment": "/**\n * The `Multicodec` class provides an interface to prepend binary data with a prefix that identifies the data that follows. https://github.com/multiformats/multicodec/blob/master/table.csv\n *\n * Multicodec is a self-describing multiformat, it wraps other formats with a tiny bit of self-description. A multicodec identifier is a varint (variable integer) that indicates the format of the data.\n *\n * The canonical table of multicodecs can be access at the following URL: https://github.com/multiformats/multicodec/blob/master/table.csv\n *\n * Example usage:\n * ```ts\n * Multicodec.registerCodec({ code: 0xed, name: 'ed25519-pub' });\n * const prefixedData = Multicodec.addPrefix({ code: 0xed, data: new Uint8Array(32) });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Multicodec "
            }
          ],
          "fileUrlPath": "src/multicodec.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Multicodec",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Multicodec.addPrefix:member(1)",
              "docComment": "/**\n * Adds a multicodec prefix to input data.\n *\n * @param options - The options for adding a prefix.\n *\n * @param  - options.code - The codec code. Either the code or name must be provided.\n *\n * @param  - options.name - The codec name. Either the code or name must be provided.\n *\n * @param  - options.data - The data to be prefixed.\n *\n * @returns The data with the added prefix as a Uint8Array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static addPrefix(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        code?: "
                },
                {
                  "kind": "Reference",
                  "text": "MulticodecCode",
                  "canonicalReference": "@web5/common!MulticodecCode:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        data: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        name?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addPrefix"
            },
            {
              "kind": "Property",
              "canonicalReference": "@web5/common!Multicodec.codeToName:member",
              "docComment": "/**\n * A static field containing a map of codec codes to their corresponding names.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static codeToName: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "codeToName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Multicodec.getCodeFromData:member(1)",
              "docComment": "/**\n * Get the Multicodec code from given prefixed data.\n *\n * @param options - The options for getting the codec code.\n *\n * @param  - options.prefixedData - The data to extract the codec code from.\n *\n * @returns - The Multicodec code as a number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getCodeFromData(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        prefixedData: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MulticodecCode",
                  "canonicalReference": "@web5/common!MulticodecCode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getCodeFromData"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Multicodec.getCodeFromName:member(1)",
              "docComment": "/**\n * Get the Multicodec code from given Multicodec name.\n *\n * @param options - The options for getting the codec code.\n *\n * @param  - options.name - The name to lookup.\n *\n * @returns - The Multicodec code as a number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getCodeFromName(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        name: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MulticodecCode",
                  "canonicalReference": "@web5/common!MulticodecCode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getCodeFromName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Multicodec.getNameFromCode:member(1)",
              "docComment": "/**\n * Get the Multicodec name from given Multicodec code.\n *\n * @param options - The options for getting the codec name.\n *\n * @param  - options.name - The code to lookup.\n *\n * @returns - The Multicodec name as a string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getNameFromCode(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        code: "
                },
                {
                  "kind": "Reference",
                  "text": "MulticodecCode",
                  "canonicalReference": "@web5/common!MulticodecCode:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getNameFromCode"
            },
            {
              "kind": "Property",
              "canonicalReference": "@web5/common!Multicodec.nameToCode:member",
              "docComment": "/**\n * A static field containing a map of codec names to their corresponding codes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static nameToCode: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameToCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Multicodec.registerCodec:member(1)",
              "docComment": "/**\n * Registers a new codec in the Multicodec class.\n *\n * @param codec - The codec to be registered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static registerCodec(codec: "
                },
                {
                  "kind": "Reference",
                  "text": "MulticodecDefinition",
                  "canonicalReference": "@web5/common!MulticodecDefinition:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "MulticodecCode",
                  "canonicalReference": "@web5/common!MulticodecCode:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "codec",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "registerCodec"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Multicodec.removePrefix:member(1)",
              "docComment": "/**\n * Returns the data with the Multicodec prefix removed.\n *\n * @param refixedData - The data to extract the codec code from.\n *\n * @returns {Uint8Array}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static removePrefix(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        prefixedData: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        code: "
                },
                {
                  "kind": "Reference",
                  "text": "MulticodecCode",
                  "canonicalReference": "@web5/common!MulticodecCode:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        name: string;\n        data: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "removePrefix"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@web5/common!MulticodecCode:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MulticodecCode = "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/multicodec.ts",
          "releaseTag": "Public",
          "name": "MulticodecCode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@web5/common!MulticodecDefinition:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MulticodecDefinition<MulticodecCode> = "
            },
            {
              "kind": "Content",
              "text": "{\n    code: MulticodecCode;\n    name: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/multicodec.ts",
          "releaseTag": "Public",
          "name": "MulticodecDefinition",
          "typeParameters": [
            {
              "typeParameterName": "MulticodecCode",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@web5/common!NodeStream:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NodeStream "
            }
          ],
          "fileUrlPath": "src/stream-node.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "NodeStream",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.consumeToArrayBuffer:member(1)",
              "docComment": "/**\n * Consumes a `Readable` stream and returns its contents as an `ArrayBuffer`.\n *\n * This method reads all data from a Node.js `Readable` stream, collects it, and converts it into an `ArrayBuffer`.\n *\n * @param readable - The Node.js Readable stream whose data will be consumed.\n *\n * @returns A Promise that resolves to an `ArrayBuffer` containing all the data from the stream.\n *\n * @example\n * ```ts\n * const nodeReadable = getReadableStreamSomehow();\n * const arrayBuffer = await NodeStream.consumeToArrayBuffer({ readable: nodeReadable });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static consumeToArrayBuffer({ readable }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readable: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readable }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "consumeToArrayBuffer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.consumeToBlob:member(1)",
              "docComment": "/**\n * Consumes a `Readable` stream and returns its contents as a `Blob`.\n *\n * This method reads all data from a Node.js `Readable` stream, collects it, and converts it into a `Blob`.\n *\n * @param readableStream - The Node.js `Readable` stream whose data will be consumed.\n *\n * @returns A Promise that resolves to a `Blob` containing all the data from the stream.\n *\n * @example\n * ```ts\n * const nodeReadable = getReadableStreamSomehow();\n * const blob = await NodeStream.consumeToBlob({ readable: nodeReadable });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static consumeToBlob({ readable }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readable: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Blob",
                  "canonicalReference": "!Blob:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readable }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "consumeToBlob"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.consumeToBytes:member(1)",
              "docComment": "/**\n * Consumes a `Readable` stream and returns its contents as a `Uint8Array`.\n *\n * This method reads all data from a Node.js `Readable`, collects it, and converts it into a `Uint8Array`.\n *\n * @param readableStream - The Node.js `Readable` stream whose data will be consumed.\n *\n * @returns A Promise that resolves to a `Uint8Array` containing all the data from the stream.\n *\n * @example\n * ```ts\n * const nodeReadable = getReadableStreamSomehow();\n * const bytes = await NodeStream.consumeToBytes({ readable: nodeReadable });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static consumeToBytes({ readable }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readable: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readable }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "consumeToBytes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.consumeToJson:member(1)",
              "docComment": "/**\n * Consumes a `Readable` stream and parses its contents as JSON.\n *\n * This method reads all the data from the stream, converts it to a text string, and then parses it as JSON, returning the resulting object.\n *\n * @param readableStream - The Node.js `Readable` stream whose JSON content will be consumed.\n *\n * @returns A Promise that resolves to the parsed JSON object from the stream's data.\n *\n * @example\n * ```ts\n * const nodeReadable = getReadableStreamSomehow();\n * const jsonData = await NodeStream.consumeToJson({ readable: nodeReadable });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static consumeToJson({ readable }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readable: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readable }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "consumeToJson"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.consumeToText:member(1)",
              "docComment": "/**\n * Consumes a `Readable` stream and returns its contents as a text string.\n *\n * This method reads all the data from the stream, converting it into a single string.\n *\n * @param readableStream - The Node.js `Readable` stream whose text content will be consumed.\n *\n * @returns A Promise that resolves to a string containing all the data from the stream.\n *\n * @example\n * ```ts\n * const nodeReadable = getReadableStreamSomehow();\n * const text = await NodeStream.consumeToText({ readable: nodeReadable });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static consumeToText({ readable }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readable: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readable }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "consumeToText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.fromWebReadable:member(1)",
              "docComment": "/**\n * Converts a Web `ReadableStream` to a Node.js `Readable` stream.\n *\n * This method takes a Web `ReadableStream` and converts it to a Node.js `Readable` stream. The conversion is done by reading chunks from the Web `ReadableStream` and pushing them into the Node.js `Readable` stream.\n *\n * @param readableStream - The Web `ReadableStream` to be converted.\n *\n * @param readableOptions - Optional `Readable` stream options for the Node.js stream.\n *\n * @returns The Node.js `Readable` stream.\n *\n * @example\n * ```ts\n * const webReadableStream = getWebReadableStreamSomehow();\n * const nodeReadableStream = NodeStream.fromWebReadable({ readableStream: webReadableStream });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromWebReadable({ readableStream, readableOptions }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readableStream: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        readableOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStateOptions",
                  "canonicalReference": "@types/readable-stream!_Readable.ReadableStateOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readableStream, readableOptions }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "fromWebReadable"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.isDestroyed:member(1)",
              "docComment": "/**\n * Checks if a Node.js stream (`Readable`, `Writable`, `Duplex`, or `Transform`) has been destroyed.\n *\n * This method determines whether the provided Node.js stream has been destroyed. A stream is considered destroyed if its 'destroyed' property is set to true or if its internal state indicates it has been destroyed.\n *\n * @param stream - The Node.js stream to check.\n *\n * @returns `true` if the stream has been destroyed; otherwise, `false`.\n *\n * @example\n * ```ts\n * const stream = getStreamSomehow();\n * stream.destroy(); // Destroy the stream.\n * const isDestroyed = NodeStream.isDestroyed({ stream });\n * console.log(isDestroyed); // Output: true\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isDestroyed({ stream }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        stream: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Writable",
                  "canonicalReference": "@types/readable-stream!_Readable.Writable:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Duplex",
                  "canonicalReference": "@types/readable-stream!_Readable.Duplex:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Transform",
                  "canonicalReference": "@types/readable-stream!_Readable.Transform:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ stream }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isDestroyed"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.isReadable:member(1)",
              "docComment": "/**\n * Checks if a Node.js `Readable` stream is still readable.\n *\n * This method checks if a Node.js `Readable` stream is still in a state that allows reading from it. A stream is considered readable if it has not ended, has not been destroyed, and is not currently paused.\n *\n * @param readable - The Node.js `Readable` stream to be checked.\n *\n * @returns `true` if the stream is still readable; otherwise, `false`.\n *\n * @example\n * ```ts\n * const readableStream = new Readable();\n * const isReadable = NodeStream.isReadable({ readable: readableStream });\n * console.log(isReadable); // Output: true or false\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isReadable({ readable }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readable: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readable }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isReadable"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.isReadableStream:member(1)",
              "docComment": "/**\n * Checks if an object is a Node.js `Readable` stream.\n *\n * This method verifies if the provided object is a Node.js `Readable` stream by checking for specific properties and methods typical of a `Readable` stream in Node.js.\n *\n * @param obj - The object to be checked.\n *\n * @returns `true` if `obj` is a Node.js `Readable` stream; otherwise, `false`.\n *\n * @example\n * ```ts\n * const obj = getSomeObject();\n * if (NodeStream.isReadableStream(obj)) {\n *   // obj is a Node.js Readable stream\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isReadableStream(obj: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "obj",
                  "canonicalReference": "@web5/common!~obj"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isReadableStream"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.isStream:member(1)",
              "docComment": "/**\n * Checks if the provided object is a Node.js stream (`Duplex`, `Readable`, `Writable`, or `Transform`).\n *\n * This method checks for the presence of internal properties specific to Node.js streams: `_readableState` and `_writableState`. These properties are present in Node.js stream instances, allowing identification of the stream type.\n *\n * The `_readableState` property is found in `Readable` and `Duplex` streams (including `Transform` streams, which are a type of `Duplex` stream), indicating that the stream can be read from. The `_writableState` property is found in `Writable` and `Duplex` streams, indicating that the stream can be written to.\n *\n * @remarks\n *\n * - This method does not differentiate between the different types of streams (Readable, Writable, Duplex, Transform). It simply checks if the object is any kind of Node.js stream. - While this method can identify standard Node.js streams, it may not recognize custom or third-party stream-like objects that do not inherit directly from Node.js's stream classes or do not have these internal state properties. This is intentional as many of the methods in this library are designed to work with standard Node.js streams.\n *\n * @param obj - The object to be checked for being a Node.js stream.\n *\n * @returns `true` if the object is a Node.js stream (`Duplex`, `Readable`, `Writable`, or `Transform`); otherwise, `false`.\n *\n * @example\n * ```ts\n * const { Readable, Writable, Duplex, Transform } = require('stream');\n *\n * const readableStream = new Readable();\n * console.log(NodeStream.isStream(readableStream)); // Output: true\n *\n * const writableStream = new Writable();\n * console.log(NodeStream.isStream(writableStream)); // Output: true\n *\n * const duplexStream = new Duplex();\n * console.log(NodeStream.isStream(duplexStream)); // Output: true\n *\n * const transformStream = new Transform();\n * console.log(NodeStream.isStream(transformStream)); // Output: true\n *\n * const nonStreamObject = {};\n * console.log(NodeStream.isStream(nonStreamObject)); // Output: false\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isStream(obj: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "obj",
                  "canonicalReference": "@web5/common!~obj"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "Duplex",
                  "canonicalReference": "@types/readable-stream!_Readable.Duplex:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Writable",
                  "canonicalReference": "@types/readable-stream!_Readable.Writable:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Transform",
                  "canonicalReference": "@types/readable-stream!_Readable.Transform:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isStream"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!NodeStream.toWebReadable:member(1)",
              "docComment": "/**\n * Converts a Node.js `Readable` stream to a Web `ReadableStream`.\n *\n * This method provides a bridge between Node.js streams and the Web Streams API by converting a Node.js `Readable` stream into a Web `ReadableStream`. It listens for 'data', 'end', and 'error' events on the Node.js stream and appropriately enqueues data, closes, or errors the Web `ReadableStream`.\n *\n * If the Node.js stream is already destroyed, the method returns an immediately cancelled Web `ReadableStream`.\n *\n * @param readable - The Node.js `Readable` stream to be converted.\n *\n * @returns A Web `ReadableStream` corresponding to the provided Node.js `Readable` stream.\n *\n * @example\n * ```ts\n * const nodeReadable = getNodeReadableStreamSomehow();\n * const webReadableStream = NodeStream.toWebReadable({ readable: nodeReadable });\n * ```\n *\n * @throws\n *\n * TypeError if `readable` is not a Node.js `Readable` stream.\n *\n * @throws\n *\n * Error if the Node.js `Readable` stream is already destroyed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static toWebReadable({ readable }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readable: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "@types/readable-stream!_Readable.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readable }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toWebReadable"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@web5/common!removeEmptyObjects:function(1)",
          "docComment": "/**\n * Recursively removes all properties with an empty object or array as its value from the given object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeEmptyObjects(obj: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/object.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "removeEmptyObjects"
        },
        {
          "kind": "Function",
          "canonicalReference": "@web5/common!removeUndefinedProperties:function(1)",
          "docComment": "/**\n * Recursively removes all properties with `undefined` as its value from the given object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeUndefinedProperties(obj: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/object.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "removeUndefinedProperties"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@web5/common!RequireOnly:type",
          "docComment": "/**\n * Represents an object type where a subset of keys are required and everything else is optional.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RequireOnly<T, K extends "
            },
            {
              "kind": "Content",
              "text": "keyof T"
            },
            {
              "kind": "Content",
              "text": ", O extends "
            },
            {
              "kind": "Content",
              "text": "keyof T"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "never"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<T, K>> & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<T>, O>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "RequireOnly",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 15
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@web5/common!Stream:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Stream "
            }
          ],
          "fileUrlPath": "src/stream.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Stream",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.asAsyncIterator:member(1)",
              "docComment": "/**\n * Transforms a `ReadableStream` into an `AsyncIterable`. This allows for the asynchronous iteration over the stream's data chunks.\n *\n * This method creates an async iterator from a `ReadableStream`, enabling the use of `for await...of` loops to process stream data. It reads from the stream until it's closed or errored, yielding each chunk as it becomes available.\n *\n * @remarks\n *\n * - The method ensures proper cleanup by releasing the reader lock when iteration is completed or if an error occurs.\n *\n * @param readableStream - The Web `ReadableStream` to be transformed into an `AsyncIterable`.\n *\n * @returns An `AsyncIterable` that yields data chunks from the `ReadableStream`.\n *\n * @example\n * ```ts\n * const readableStream = new ReadableStream({ ... });\n * for await (const chunk of Stream.asAsyncIterator(readableStream)) {\n *   // process each chunk\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static asAsyncIterator<T>(readableStream: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "readableStream",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "asAsyncIterator"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.consumeToArrayBuffer:member(1)",
              "docComment": "/**\n * Consumes a `ReadableStream` and returns its contents as an `ArrayBuffer`.\n *\n * This method reads all data from a `ReadableStream`, collects it, and converts it into an `ArrayBuffer`.\n *\n * @param readableStream - The Web `ReadableStream` whose data will be consumed.\n *\n * @returns A Promise that resolves to an `ArrayBuffer` containing all the data from the stream.\n *\n * @example\n * ```ts\n * const readableStream = new ReadableStream({ ... });\n * const arrayBuffer = await Stream.consumeToArrayBuffer({ readableStream });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static consumeToArrayBuffer({ readableStream }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readableStream: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readableStream }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "consumeToArrayBuffer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.consumeToBlob:member(1)",
              "docComment": "/**\n * Consumes a `ReadableStream` and returns its contents as a `Blob`.\n *\n * This method reads all data from a `ReadableStream`, collects it, and converts it into a `Blob`.\n *\n * @param readableStream - The Web `ReadableStream` whose data will be consumed.\n *\n * @returns A Promise that resolves to a `Blob` containing all the data from the stream.\n *\n * @example\n * ```ts\n * const readableStream = new ReadableStream({ ... });\n * const blob = await Stream.consumeToBlob({ readableStream });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static consumeToBlob({ readableStream }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readableStream: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Blob",
                  "canonicalReference": "!Blob:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readableStream }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "consumeToBlob"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.consumeToBytes:member(1)",
              "docComment": "/**\n * Consumes a `ReadableStream` and returns its contents as a `Uint8Array`.\n *\n * This method reads all data from a `ReadableStream`, collects it, and converts it into a `Uint8Array`.\n *\n * @param readableStream - The Web `ReadableStream` whose data will be consumed.\n *\n * @returns A Promise that resolves to a `Uint8Array` containing all the data from the stream.\n *\n * @example\n * ```ts\n * const readableStream = new ReadableStream({ ... });\n * const bytes = await Stream.consumeToBytes({ readableStream });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static consumeToBytes({ readableStream }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readableStream: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readableStream }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "consumeToBytes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.consumeToJson:member(1)",
              "docComment": "/**\n * Consumes a `ReadableStream` and parses its contents as JSON.\n *\n * This method reads all the data from the stream, converts it to a text string, and then parses it as JSON, returning the resulting object.\n *\n * @param readableStream - The Web `ReadableStream` whose JSON content will be consumed.\n *\n * @returns A Promise that resolves to the parsed JSON object from the stream's data.\n *\n * @example\n * ```ts\n * const readableStream = new ReadableStream({ ... });\n * const jsonData = await Stream.consumeToJson({ readableStream });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static consumeToJson({ readableStream }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readableStream: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readableStream }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "consumeToJson"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.consumeToText:member(1)",
              "docComment": "/**\n * Consumes a `ReadableStream` and returns its contents as a text string.\n *\n * This method reads all the data from the stream, converting it into a single string.\n *\n * @param readableStream - The Web `ReadableStream` whose text content will be consumed.\n *\n * @returns A Promise that resolves to a string containing all the data from the stream.\n *\n * @example\n * ```ts\n * const readableStream = new ReadableStream({ ... });\n * const text = await Stream.consumeToText({ readableStream });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static consumeToText({ readableStream }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readableStream: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readableStream }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "consumeToText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.generateByteStream:member(1)",
              "docComment": "/**\n * Generates a `ReadableStream` of `Uint8Array` chunks with customizable length and fill value.\n *\n * This method creates a `ReadableStream` that emits `Uint8Array` chunks. You can specify the total length of the stream, the length of individual chunks, and a fill value or range for the chunks. It's useful for testing or when specific binary data streams are required.\n *\n * @param streamLength - The total length of the stream in bytes. If omitted, the stream is infinite.\n *\n * @param chunkLength - The length of each chunk. If omitted, each chunk is the size of `streamLength`.\n *\n * @param fillValue - A value or range to fill the chunks with. Can be a single number or a tuple [min, max].\n *\n * @returns A `ReadableStream` that emits `Uint8Array` chunks.\n *\n * @example\n * ```ts\n * // Create a stream of 1000 bytes with 100-byte chunks filled with 0xAA.\n * const byteStream = Stream.generateByteStream({\n *   streamLength: 1000,\n *   chunkLength: 100,\n *   fillValue: 0xAA\n * });\n *\n * // Create an unending stream of 100KB chunks filled with values that range from 1 to 99.\n * const byteStream = Stream.generateByteStream({\n *  chunkLength: 100 * 1024,\n *  fillValue: [1, 99]\n * });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static generateByteStream({ streamLength, chunkLength, fillValue }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        streamLength?: number;\n        chunkLength?: number;\n        fillValue?: number | [number, number];\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ streamLength, chunkLength, fillValue }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "generateByteStream"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.isReadable:member(1)",
              "docComment": "/**\n * Checks if the provided Web `ReadableStream` is in a readable state.\n *\n * After verifying that the stream is a Web {@link https://streams.spec.whatwg.org/#rs-model | ReadableStream}, this method checks the {@link https://streams.spec.whatwg.org/#readablestream-locked | locked} property of the ReadableStream. The `locked` property is `true` if a reader is currently active, meaning the stream is either being read or has already been read (and hence is not in a readable state). If `locked` is `false`, it means the stream is still in a state where it can be read.\n *\n * In the case where a `ReadableStream` has been unlocked but is no longer readable (for example, if it has been fully read or cancelled), additional checks are needed beyond just examining the locked property. The ReadableStream API does not provide a direct way to check if the stream has data left or if it's in a readable state once it's been unlocked.\n *\n * Per {@link https://streams.spec.whatwg.org/#other-specs-rs-introspect | WHATWG Streams, Section 9.1.3. Introspection}:\n *\n * > ...note that apart from checking whether or not the stream is locked, this direct > introspection is not possible via the public JavaScript API, and so specifications should > instead use the algorithms in §9.1.2 Reading. (For example, instead of testing if the stream > is readable, attempt to get a reader and handle any exception.)\n *\n * This implementation employs the technique suggested by the WHATWG Streams standard by attempting to acquire a reader and checking the state of the reader. If acquiring a reader succeeds, it immediately releases the lock and returns `true`, indicating the stream is readable. If an error occurs while trying to get a reader (which can happen if the stream is already closed or errored), it catches the error and returns `false`, indicating the stream is not readable.\n *\n * @remarks\n *\n * - This method does not check whether the stream has data left to read; it only checks if the stream is in a state that allows reading. It is possible for a stream to be unlocked but still have no data left if it has never been locked to a reader.\n *\n * @param readableStream - The Web `ReadableStream` to be checked for readability.\n *\n * @returns `true` if the stream is a `ReadableStream` and is in a readable state (not locked and no error on getting a reader); otherwise, `false`.\n *\n * @example\n * ```ts\n * const readableStream = new ReadableStream({ ... });\n * const isStreamReadable = Stream.isReadable({ readableStream });\n * console.log(isStreamReadable); // Output: true or false\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isReadable({ readableStream }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readableStream: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ readableStream }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isReadable"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.isReadableStream:member(1)",
              "docComment": "/**\n * Checks if an object is a Web `ReadableStream`.\n *\n * This method verifies whether the given object is a `ReadableStream` by checking its type and the presence of the `getReader` function.\n *\n * @param obj - The object to be checked.\n *\n * @returns `true` if `obj` is a `ReadableStream`; otherwise, `false`.\n *\n * @example\n * ```ts\n * const obj = getSomeObject();\n * if (Stream.isReadableStream(obj)) {\n *   // obj is a ReadableStream\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isReadableStream(obj: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "obj",
                  "canonicalReference": "@web5/common!~obj"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isReadableStream"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.isStream:member(1)",
              "docComment": "/**\n * Checks if an object is a Web `ReadableStream`, `WritableStream`, or `TransformStream`.\n *\n * This method verifies the type of a given object to determine if it is one of the standard stream types in the Web Streams API: `ReadableStream`, `WritableStream`, or `TransformStream`. It employs type-checking strategies that are specific to each stream type.\n *\n * The method checks for the specific functions and properties associated with each stream type: - `ReadableStream`: Identified by the presence of a `getReader` method. - `WritableStream`: Identified by the presence of a `getWriter` and `abort` methods. - `TransformStream`: Identified by having both `readable` and `writable` properties.\n *\n * @remarks\n *\n * - This method does not differentiate between `ReadableStream`, `WritableStream`, and `TransformStream`. It checks if the object conforms to any of these types. - This method is specific to the Web Streams API and may not recognize non-standard or custom stream-like objects that do not adhere to the Web Streams API specifications.\n *\n * @param obj - The object to be checked for being a Web `ReadableStream`, `WritableStream`, or `TransformStream`.\n *\n * @returns `true` if the object is a `ReadableStream`, `WritableStream`, or `TransformStream`; otherwise, `false`.\n *\n * @example\n * ```ts\n * const readableStream = new ReadableStream();\n * console.log(Stream.isStream(readableStream)); // Output: true\n *\n * const writableStream = new WritableStream();\n * console.log(Stream.isStream(writableStream)); // Output: true\n *\n * const transformStream = new TransformStream();\n * console.log(Stream.isStream(transformStream)); // Output: true\n *\n * const nonStreamObject = {};\n * console.log(Stream.isStream(nonStreamObject)); // Output: false\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isStream(obj: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "obj",
                  "canonicalReference": "@web5/common!~obj"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream",
                  "canonicalReference": "!ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "WritableStream",
                  "canonicalReference": "!WritableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TransformStream",
                  "canonicalReference": "!TransformStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isStream"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.isTransformStream:member(1)",
              "docComment": "/**\n * Checks if an object is a `TransformStream`.\n *\n * This method verifies whether the given object is a `TransformStream` by checking its type and the presence of `readable` and `writable` properties.\n *\n * @param obj - The object to be checked.\n *\n * @returns `true` if `obj` is a `TransformStream`; otherwise, `false`.\n *\n * @example\n * ```ts\n * const obj = getSomeObject();\n * if (Stream.isTransformStream(obj)) {\n *   // obj is a TransformStream\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isTransformStream(obj: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "obj",
                  "canonicalReference": "@web5/common!~obj"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "TransformStream",
                  "canonicalReference": "!TransformStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isTransformStream"
            },
            {
              "kind": "Method",
              "canonicalReference": "@web5/common!Stream.isWritableStream:member(1)",
              "docComment": "/**\n * Checks if an object is a `WritableStream`.\n *\n * This method determines whether the given object is a `WritableStream` by verifying its type and the presence of the `getWriter` and `abort` functions.\n *\n * @param obj - The object to be checked.\n *\n * @returns `true` if `obj` is a `TransformStream`; otherwise, `false`.\n *\n * @example\n * ```ts\n * const obj = getSomeObject();\n * if (Stream.isWritableStream(obj)) {\n *   // obj is a WritableStream\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isWritableStream(obj: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "obj",
                  "canonicalReference": "@web5/common!~obj"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "WritableStream",
                  "canonicalReference": "!WritableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isWritableStream"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@web5/common!universalTypeOf:function(1)",
          "docComment": "/**\n * universalTypeOf\n *\n * Why does this function exist?\n *\n * You can typically check if a value is of a particular type, such as Uint8Array or ArrayBuffer, by using the `instanceof` operator. The `instanceof` operator checks the prototype property of a constructor in the object's prototype chain.\n *\n * However, there is a caveat with the `instanceof` check if the value was created from a different JavaScript context (like an iframe or a web worker). In those cases, the `instanceof` check might fail because each context has a different global object, and therefore, different built-in constructor functions.\n *\n * The `typeof` operator provides information about the type of the operand in a less detailed way. For basic data types like number, string, boolean, and undefined, the `typeof` operator works as expected. However, for objects, including arrays and null, it always returns \"object\". For functions, it returns \"function\". So, while `typeof` is good for basic type checking, it doesn't give detailed information about complex data types.\n *\n * Unlike `instanceof` and `typeof`, `Object.prototype.toString.call(value)` can ensure a consistent result across different JavaScript contexts.\n *\n * Credit for inspiration: Angus Croll https://github.com/angus-c https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function universalTypeOf(value: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/type-utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "universalTypeOf"
        }
      ]
    }
  ]
}
