import type { Hasher } from './hasher.js';
import type { Signer } from './signer.js';
import type { KeyIdentifier } from './identifier.js';
import type { AsymmetricKeyGenerator } from './key-generator.js';
import type {
  KmsSignParams,
  KmsDigestParams,
  KmsVerifyParams,
  KmsGetKeyUriParams,
  KmsGenerateKeyParams,
  KmsGetPublicKeyParams,
} from './params-kms.js';

/**
 * The `CryptoApi` interface integrates key generation, hashing, and signing functionalities,
 * designed for use with a Key Management System (KMS). It extends `AsymmetricKeyGenerator` for
 * generating asymmetric keys, `Hasher` for hash digest computations, and `Signer` for signing and
 * verifying operations.
 *
 * Concrete implementations of this interface are intended to be used with a KMS, which is
 * responsible for generating and storing cryptographic keys. The KMS is also responsible for
 * performing cryptographic operations using the keys it manages. The KMS is typically a cloud
 * service, but it can also be a hardware device or software application.
 *
 * Guidelines for implementing this interface:
 * - Must use JSON Web Keys ({@link Jwk | JWK}) as the key format.
 * - Must IANA registered JSON Object Signing and Encryption
 *   ({@link https://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-algorithms | JOSE})
 *   names for algorithm, curves, etc. whenever possible.
 * - All I/O that interacts with private or secret keys must be done via reference using a
 *   {@link KeyIdentifier | `KeyIdentifier`}. Implementations can use any string as the key
 *   identifier (e.g. JWK thumbprint, UUID generated by hosted KMS, etc.).
 * - Must support key generation, hashing, signing, and verifying operations.
 * - May be extended to support other cryptographic operations.
 * - Implementations of the `CryptoApi` interface can be passed as an argument to the public API
 *   methods of Web5 libraries that involve key material (e.g., DID creation, VC signing, arbitrary
 *   data signing/verification, etc.).
 */
export interface CryptoApi<
  GenerateKeyInput = KmsGenerateKeyParams,
  GenerateKeyOutput = KeyIdentifier,
  GetPublicKeyInput = KmsGetPublicKeyParams,
  DigestInput = KmsDigestParams,
  SignInput = KmsSignParams,
  VerifyInput = KmsVerifyParams
> extends AsymmetricKeyGenerator<GenerateKeyInput, GenerateKeyOutput, GetPublicKeyInput>,
          Hasher<DigestInput>,
          Signer<SignInput, VerifyInput> {
  /**
   * Retrieves the unique identifier for a cryptographic key, known as the Key URI.
   *
   * @remarks
   * This method returns a unique identifier, or Key URI, for a given cryptographic key. The Key
   * URI serves as a secure reference to the key, especially in systems where direct access to the
   * key material is restricted or managed by a Key Management System (KMS). The method is designed
   * to be flexible, accommodating various forms of key identifiers, such as JWK thumbprints or
   * UUIDs generated by a hosted KMS.
   *
   * @param params - The parameters for retrieving the key URI.
   * @param params.key - The cryptographic key for which the URI is being retrieved.
   * @returns A Promise that resolves to the Key URI as a string, uniquely identifying the key.
   */
  getKeyUri(params: KmsGetKeyUriParams): Promise<KeyIdentifier>;
}